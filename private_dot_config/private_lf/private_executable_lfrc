# Basic Settings
set shell sh
set previewer ~/.local/bin/scripts/lf-previewer
set cleaner ~/.local/bin/scripts/lf-cleaner
set preview true
#set hidden false
set icons true
set ignorecase true

# Custom Functions
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        *) xdg-open "$f" ;;
    esac
}}

cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

cmd chmod ${{
  printf "Mode Bits: "
  read ans

  for file in "$fx"
  do
    chmod $ans $file
  done

  lf -remote 'send reload'
}}

cmd sudomkfile ${{
  printf "File Name: "
  read ans
  sudo $EDITOR $ans
}}

cmd paste $cp-p --lf-paste $id

cmd setwallpaper %cp "$f" ~/.local/share/backgrounds/wallpaper.png && killall swaybg && swaymsg reload

cmd fzf_jump ${{
  res="$(find . -maxdepth 3 | fzf --reverse --header='Jump to location')"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd broot_jump ${{
  f=$(mktemp)
  res="$(broot --outcmd $f && cat $f | sed 's/cd //')"
  rm -f "$f"
  if [ -f "$res" ]; then
    cmd="select"
  elif [ -d "$res" ]; then
    cmd="cd"
  fi
  lf -remote "send $id $cmd \"$res\""
}}

cmd fasd_dir ${{
   res="$(fasd -dl | grep -iv cache | fzf 2>/dev/tty | sed 's/\\/\\\\/g;s/"/\\"/g')"
   if [ -d "$res" ]; then
      cmd="cd"
   else
      cmd="select"
   fi
 lf -remote "send $id $cmd \"$res\""
 }}

cmd dragon %dragon-drag-and-drop -a -x $fx
cmd dragon-stay %dragon-drag-and-drop -a $fx
cmd dragon-individual %dragon-drag-and-drop $fx
cmd dragoncp %dragoncp
cmd dragonmv %dragonmv
cmd dragondlfile %dragondlfile

# Archive bindings
cmd openarchive ${{
    case "$f" in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2|*.tar.gz|*.tgz|*.tar.xz|*.txz|*.zip|*.rar|*.iso)
            mntdir="$f-archivemount"
            [ ! -d "$mntdir" ] && {
                mkdir "$mntdir"
                archivemount "$f" "$mntdir"
                echo "$mntdir" >> "/tmp/__lf_archivemount_$id"
            }
            lf -remote "send $id cd \"$mntdir\""
            lf -remote "send $id reload"
            ;;
        *)
            for f in $fx; do
                $OPENER $f > /dev/null 2> /dev/null &
            done;;
    esac
}}

cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *.rar) unrar "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

cmd zip %zip -r "$f" "$f"
cmd tar %tar cvf "$f.tar" "$f"
cmd targz %tar cvzf "$f.tar.gz" "$f"
cmd tarbz2 %tar cjvf "$f.tar.bz2" "$f"
cmd unrar %unrar "$f.rar" "$f"

# Trash cli bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    # extract the substring from start of string up to delimiter.
    # this is the first "element" of the string.
    file=${files%%;*}

    trash-put "$(basename "$file")"
    # if there's only one element left, set `files` to an empty string.
    # this causes us to exit this `while` loop.
    # else, we delete the first "element" of the string from files, and move onto the next.
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd clear_trash %trash-empty

cmd restore_trash ${{
  trash-restore
}}

cmd stripspace %stripspace "$f"

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d
map c
map e
map f

# File Openers
map ee $$EDITOR "$f"
map u $view "$f"

# Archive Mappings
map az zip
map at tar
map ag targz
map ab targz
map au unarchive

# Trash Mappings
map dd trash
map tc clear_trash
map tr restore_trash

# Broot Mapping
map f broot_jump

# Dragon Mapping
map dr dragon
map ds dragon-stay
map di dragon-individual
map dm dragonmv
map dc dragoncp
map dl dragondlfile

map ss stripspace

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map mf mkfile
map mr sudomkfile
map md mkdir
map ms $mkscript
map ch chmod
map bg setwallpaper
map o &mimeopen $f
map O $mimeopen --ask $f
map br $vimv $fx
map r rename
map H top
map L bottom
map R reload
map C clear
map U unselect

# Movement
map gtr cd ~/.local/share/Trash/files
map gus cd ~

map gv. cd ~/Videos

map gp. cd ~/Pictures

map gw. cd ~/Pictures/Wallpapers
map gww cd ~/Pictures/Wallpapers/Wallpapers
map gwm cd ~/Pictures/Wallpapers/MobileWallpapers

map gd cd ~/Documents
map gdl cd ~/Documents/Library
map gdn cd ~/Documents/Notes
map gdp cd ~/Documents/Notes/Personal
map gdj cd ~/Documents/Notes/Personal/Journal
map gdg cd ~/Documents/Notes/Personal/Journal/GTD
map gdc cd ~/Documents/Notes/Personal/Journal/Collections

map gD cd ~/Downloads
map ge cd ~/Desktop

map gs. cd ~/.local/bin/

map gr. cd ~/.local/share/repos/
map grg cd ~/.local/share/repos/general
map grp cd ~/.local/share/repos/personal
map grd cd ~/.local/share/repos/personal/dotfiles
map grw cd ~/.local/share/repos/personal/website

map gc cd ~/.config
map gC cd ~/.local/share/
map gl cd ~/.local
map gE cd /etc
map gU. cd /usr
map gUs cd /usr/share

map \;j cd ~
